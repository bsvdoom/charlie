int limiter = 1000000;//us (this allows you to delay the action of charlieplexing,
  //allowing to tweak the speed or see the effect in simulation)

int animationDelay = 20;//ms ( 1/(animationDelay/1000)=fps => 5fps )
  //this does not really work if the charlieplexing is limited

char animationLength = 64;//match this number to the number of frames you've used


//this array is filled with all the frames you want to animate, 1 is on and 0 is off
char animation[64][8]={
  {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111
  },
    {
    B11000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11100000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11110000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111100,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111110,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B10000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11100000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11110000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111100,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111110,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B10000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11100000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11110000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111100,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111110,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B10000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11100000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11110000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111110,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B10000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11000000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11100000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11110000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111000,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111100,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111110,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B00000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B10000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11000000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11100000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11110000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111000,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111100,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111110,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B00000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B10000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11000000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11100000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11110000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111000,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111100,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111110,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B00000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B10000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11000000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11100000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11110000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111000
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111100
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111110
  },
    {
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111,
    B11111111
  },
    {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }
};
const int UPPERPIN = 13;    //upmost pin
const int LOWERPIN = 5;     //lowest pin

//this is the charlieplexing mapping, see for more info:
//http://wealoneonearth.blogspot.nl/2013/03/design-note-charlieplexing-led-matrices.html

char mapping[8][8]={
  {2,3,4,5,6,7,8,9},
  {1,3,4,5,6,7,8,9},
  {1,2,4,5,6,7,8,9},
  {1,2,3,5,6,7,8,9},
  {1,2,3,4,6,7,8,9},
  {1,2,3,4,5,7,8,9},
  {1,2,3,4,5,6,8,9},
  {1,2,3,4,5,6,7,9}
};

//two variables used for timekeeping
int animationFrame=0;
long animationTimer = 0;

void setup()
{
  //nothing to set up
}

void loop()
{
  //a timer, so you can do some other stuff at the same time
  if(millis() - animationTimer > animationDelay) {
        animationTimer = millis();
    animationFrame++;
    if (animationFrame>=animationLength)animationFrame=0;
  }
  updatePins();//update the leds
}

//the function which manages the leds
void updatePins(){

  for(int i = 0;i<8;i++){

    for(int j = 0;j<8;j++){


if(animation[animationFrame][i]& 1<<j){
        //This function works in two parts
        // 1<<j makes 00000001 for j=1, 00000010 for j=2, etc
        // then the & operator compares that bit with what is in animation[]
        //so in total, it checks a specific bit in animiation[],
        //if it's 1, a led will light, if it's 0, it will not

       resetAllPins();
        //turn off everything

       pinMode(UPPERPIN-mapping[i][j]+1, OUTPUT);//+1 for offset
        digitalWrite(UPPERPIN-mapping[i][j]+1, HIGH);
      pinMode(UPPERPIN-i, OUTPUT);
    digitalWrite(UPPERPIN-i, LOW);
        //the mapping array makes sure the right pins are turned on and off

      delayMicroseconds(limiter);
        //to be able to see the effect, we limit the speed

      }
      else resetAllPins();

    }
  }
}


void resetAllPins(){
  for(int i=LOWERPIN;i<=UPPERPIN;i++){
    pinMode(i, INPUT);
    digitalWrite(i, LOW);
  }
  //set everything to high impendance, so it will not function in the circuit
}
